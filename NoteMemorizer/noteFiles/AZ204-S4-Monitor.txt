
~ Topic 4: Monitor, troubleshoot, and optimize Azure solutions (15% to 20%)

	# You should be able to...IMPLEMENT CACHING FOR SOLUTIONS
		* Configure cache and ^expiration policies for Azure Cache for Redis
		* Implement secure and optimized application cache ^patterns including data sizing, connections, encryption, and expiration
		* Implement Azure ^Content ^Delivery ^Network endpoints and profiles

	# You should be able to...TROUBLESHOOT SOLUTIONS BY USING APPLICATION INSIGHTS
		* Configure an app or service to use Application Insights
		* Monitor and analyze metrics, logs, and ^traces
		* Implement Application Insights ^web ^tests and ^alerts


	# You can utilize Redis on your own machine as a service or on the cloud. 
		* The default port used for redis is port ^6379

	# Redis is not used for long term storage...
		* All data in Redis exists in ^memory

	# Redis has a very simple structure
		* ^json strings
		* "Key": "Value"
		
	# Which tool can you use to interact with a Redis Cache instance manually?
		* The ^redis-cli allows you to enter commands and interact with a Redis Cache instance manually

	# Which Redis command sets a key called "points" to the value "12"?
		* ^SET points 12
		
	# What does the following Redis command do? 
		"lrange MyList 0 -1"
		* This command returns ALL of values of the ^list called MyList
	
	# Explain the following Redis command:
		"setex MyPassword 2400 dwarfFortress12$"
		* This command sets the ^key called MyPassword and it's ^value to dwarfFortress12$. 
		* Then, that keyvalue pair will ^expire after 2400 ^seconds
	
	# Which command in Redis is responsible for checking to see if a keyvalue pair exists?
		* "^EXISTS myKey"
		
	# Microsoft recommends using the following pattern when working with caches like Redis Cache
		* The ^Cache-^Aside pattern
		
	#  Storing too much in a cookie can have a negative effect on performance as the cookie size grows and is passed and validated with every request.
		* A typical solution uses the ^cookie as a KEY to query the data in a database
		* Using an ^in-^memory cache, like Azure Cache for Redis, to associate information with a user is faster than interacting with a full relational database.
		* This is often called the ^Session ^Store pattern

	# Applications sometimes require a series of commands against a backend data-store to execute as a single atomic operation
		* Single atomic operation means that all commands MUST succeed, or all must be rolled back to the initial state
		* Azure Cache for Redis supports executing a ^batch of commands as a single transaction
		
	# Basic tier for Redis cache runs on a single VM. 
		* This tier has no ^service-^level ^agreement and is ideal for ^development/^test and noncritical workloads
		
	# In general, when choosing Redis Cache tiers, The higher up the tiers you go you get access to higher ^throughput, lower ^latency, better ^availability and more ^features
		
	# Fill in the following:
		* A ^content ^delivery ^network is a distributed network of servers that can efficiently deliver web content to users
		* They store cached content on edge servers in ^point-of-^presence (POP) locations that are close to end users, to minimize latency.
		
	# Features of Azure CDN (Content Delivery Networks):
		* Large scaling, less traffic to origin servers
		* CDN ^Caching rules
		* ^HTTPS support: Azure CDN can host a TLS/SSL certification or you can use your own. 
			Note: Using ^HTTPS does not increase the cost of Azure CDN.
		* Azure diagnostics logs
		* File compression / object ^chunking
		
	# Features of Azure CDN (Content Delivery Networks):
		* Geo-^filtering enables you to allow or block content in specific countries/regions.
		* Azure CDN can also accelerate dynamic content, which can't be cached, by using various network optimizations using CDN POPs.
		* Pre-populate caching in CDNs by using “ az cdn endpoint ^load ”
		* Purge content from your CDNs by using “” or using the PurgeContent method in the Microsoft.Azure.Management.Cdn library in an app implementation.

	# How Azure CDN Functions
		* 1. User requests endpoint, DNS routes request to closest ^POP location
		* 2. If no edge servers have the requested content in their cache, ^POP requests the file from the ^origin server.
				 Note: “^origin server” here can mean an Azure Web App, or any publicly accessible web server.
		* 3. Origin server returns file to edge server in ^POP location
		* 4. Edge server in ^POP location caches file and returns it to user. ^Time-to-^live (TTL) is specified by the origin server in the HTTP header (Cache-Control), or default to 7 days.

	# When setting Caching Rules, Azure CDN's support two kinds of match conditions:
		* Path^ match condition: This condition matches the path of the URL, excluding domain name, and supports the wildcard symbol
			For example, /myfile.html, /my/folder/*, and /my/images/*.jpg
		
		* Extension^ match condition: Provide a list of comma delimited file extensions to match.
			For example, .jpg, .mp3, .png

	# Azure CDN Caching Rules Priority:
		* If no rules are defined, the ^default caching behavior is used (HTTP cache-directive header)
		* If ^global caching rules exist, they overwrite any default caching behavior
		* If ^custom caching rules exist, they overwrite any other behavior

	# "Fresh" content (Azure CDN concepts)
		*  A cached resource is considered to be fresh when its ^age is less than the that defined by a cache setting
		* Therefore if your content is time-sensitive and you need to ensure accurate updates to the content, then make sure to set your ^time-to-^live to a short duration, or consider including a version string in the asset URL.

	# Azure CDNs (Content Delivery Networks) Use Object Chunking
		* When a ^large file is requested, the CDN prefetches smaller 8MB chunks of the content in parallel, serving the user the chunks as they are recieved and caching those chunks for repeated requests.
		* This prefetch process ensures that the content stays one chunk ahead of the user, which reduces latency. 

	# Collections of Azure CDN (Content Delivery Network) endpoints is called:
		* A CDN ^profile
		* A ^profile defines the pricing tier for that collection of endpoints
		* You can only have so many ^profiles in one azure subscription

