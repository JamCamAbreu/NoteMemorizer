~ Topic 1: Develop Azure compute solutions (25% to 30%)

	# You should be able to...IMPLEMENT CONTAINERIZED SOLUTIONS:
		* Create and manage container images for solutions
		* Publish an image to Azure Container ^Registry
		* Run containers by using Azure Container ^Instance
		* Create solutions by using Azure Container ^Apps

	# You should be able to...IMPLEMENT AZURE APP SERVICE WEB APPS:
		* Create an Azure App Service Web App
		* Enable ^diagnostics logging
		* ^Deploy code to a web app
		* Configure web app settings including Transport Layer Security (TLS), API settings, and connection strings
		* Implement ^autoscaling

	# You should be able to...Implement Azure Functions
		* Create and configure an Azure ^Functions app
		* Implement input and output ^bindings
		* Implement function ^triggers by using data operations, timers, and webhooks


	# Which tool or service is this?
		* ^Azure ^Container ^Registry (ACR) is a managed, private Docker registry service based on the open-source Docker Registry 2.0
			- Create and maintain ^Azure ^container ^registries to store and manage your private Docker container images

	# Pull images from an Azure container registry to various deployment targets:
		* Scalable ^orchestration systems that manage containerized applications across clusters of hosts, including Kubernetes, DC/OS, and Docker Swarm.

		* ^Azure ^services that support building and running applications at scale, including Azure Kubernetes Service (AKS), App Service, Batch, Service Fabric, and others

	# Containers and CI/CD
		* Developers can target an Azure ^Container ^Registry from a continuous integration and delivery tool such as Azure Pipelines or Jenkins

	# Azure Container Registry is available in multiple service tiers
		* ^Basic: A cost-optimized entry point for developers learning about Azure Container Registry
		
		* ^Standard: increased included storage and image throughput
			- should satisfy the needs of most production scenarios
		
		* ^Premium: highest amount of included storage and concurrent operations
			- highest image throughput
			- geo replication
			- content trust for image tag signing
			- private endpoints to restrict access

	# Azure Container Registry Features
		* Azure container registries can include both Windows and ^Linux images.
		
	# Azure Container Registry Features
		* Use Azure ^Container ^Registry ^Tasks to streamline building, testing, pushing, and deploying images in Azure. 
		* Configure Azure ^Container ^Registry ^Tasks to automate your container OS and framework patching pipeline, and build images automatically when your team commits code to source control.

	# Azure Container Registry Features
		* ^Encryption-at-^rest (available at all tiers): Azure automatically encrypts an image before storing it, and decrypts it on-the-fly when you or your applications and services pull the image.

	# Azure Container Registry Features
		* ^Regional ^storage: Azure Container Registry stores data in the region where the registry is created, to help customers meet data residency and compliance requirements.
		* However, this does not guarentee availability. Customers who wish to have their registry data stored in multiple regions for better performance across different geographies or who wish to have resiliency in the event of a regional outage should enable geo-^replication.
		
	# Premium Tier - Azure Container Registry
		* ^Zone redundancy: A feature of the Premium service tier, ^zone redundancy uses Azure availability zones to replicate your registry to a minimum of three separate zones in each enabled region.

	# Azure Container Registry Features
		* Scalable ^storage: Azure Container Registry allows you to create as many repositories, images, layers, or tags as you need, up to the registry storage limit.

	# Azure Container Registries
		* ACR ^Tasks is a suite of features within Azure Container Registry.
		* It provides ^cloud-based container image building for platforms including Linux, Windows, and Azure Resource Manager, and can automate OS and framework patching for your Docker containers.
		* It enables ^automated builds triggered by source code updates, updates to a container's base image, or timers.
		
	# ACR "Tasks" supports several scenarios to build and maintain container images and other artifacts
		* ^Quick task - Build and push a single container image to a container registry on-demand, in Azure, without needing a local Docker Engine installation. Think docker build, docker push in the cloud.
		
	# ACR "Tasks" supports several scenarios to build and maintain container images and other artifacts
		* ^Automatically ^triggered tasks - Enable one or more triggers to build an image:
				- Trigger on source code update
				- Trigger on base image update
				- Trigger on a schedule
	
	# ACR "Tasks" supports several scenarios to build and maintain container images and other artifacts
		* ^Multi-step task - Extend the single image build-and-push capability of ACR Tasks with multi-step, multi-container-based workflows
		
	# Azure Container Registries "Tasks"
		* Each ACR Task has an associated source code ^context - the location of a set of source files used to build a container image or other artifact. Example contexts include a Git repository or a local filesystem.
		
	# Fill in the following Azure Container Registry question:
		* By default, ACR Tasks builds images for the ^Linux OS and the amd64 architecture. Specify the --platform tag to build Windows images or Linux images for other architectures
		
	# Fill in the following Container question:
		* A ^Dockerfile is a script that contains a series of instructions that are used to build a Docker image. ^Dockerfiles typically include the following information:
			- The base or parent image we use to create the new image
			- Commands to update the base OS and install other software
			- Build artifacts to include, such as a developed application
			- Services to expose, such a storage and network configuration
			- Command to run when the container is launched

	# Exercise: Build and run a container image by using ACR Tasks
		* Step 1: ^Create an Azure Container Registry inside a new resource group
			az group create --name myResourceGroup
											--location northcentralus
											
			az acr create --resource-group myResourceGroup
										--name brockwittrockqaacr 
										--sku Basic
						
		* Step 2: Build and push an ^image from a Docker file
			az acr build --image sample/hello-world:v1 --registry brockwittrockqaacr --file Dockerfile

		* Step 3: Verify the Results
			az acr repository --name brockwittrockaz204acr --output table

		* Step 4: ^Run the image in the ACR
			az acr run --registry brockwittrockaz204acr --cmd ‘$Registry/sample/hello-world:v1’ /dev/null

	# Which tool or service is this?
		* ^Azure ^Container ^Instances (ACI) is a great solution for any scenario that can operate in isolated containers, including simple applications, task automation, and build jobs.
			
			Benefits include:
				- Fast startup – start containers in Azure in seconds. No need to provision or manage VMs.
				- Container access – Expose your container groups directly to the internet with an IP address and an FQDN.
				- Hypervisor-level security – Completely isolate your application the same as it would be in a VM.
				- Customer data – ACI service stores the minimum customer data required to ensure your container groups are running as expected.
				- Custom sizes – You can specify custom CPU cores and memory.
				- Persistent storage – Mount Azure Files shares directly to a container to retrieve and persist state.
				- Windows and Linux- Support both operating systems using the same API.
				- Use Azure Kubernetes Service (AKS) for when you need full container orchestration including service discovery across multiple containers, automatic scaling, and coordinated application upgrades.

	# Azure Container Instance (ACI)
		* ^Container ^groups are the top-level resource in an Azure Container Instance. A collection of containers scheduled on the same host machine. Share lifecycle, resources, local network, and storage volumes. They are like a pod in Kubernetes.

	# Azure Container Instance (ACI)
		* Only ^Linux containers supported in a multi-container group. ^Windows supports a single container only

	# Azure Container Instance (ACI)
		* For deployment, use an ^ARM template or ^YAML file. 
			- ^ARM templates are more useful when you are deploying other resources alongside the container group
		
	# Answer the following question about Azure Container Instance container groups:
		* If you create a container group with two instances, each requesting one CPU, then the container group is allocated ^two (how many?) CPU(s).
		
	# Answer the following networking question about Azure Container Instance (ACI)
		* Container groups ^share an IP address and a port namespace on that IP address. 
		
		* To enable external clients to reach a container within the group, you must expose the ^port on the IP address and from the container. (Note: Because containers within the group share a port namespace, port mapping isn't supported.)
	
	# Answer the following question about using Azure Container Instance (ACI)
		* Supported ^storage volumes include Azure file share, Secret, Empty directory, and cloned git repo.
		
	# Azure Container Instance (ACI): The shell command to create a container
		* az ^container create --name mycontainer --resource-group myResourceGroup
	
	# Azure Container Instance (ACI): The shell command to create a resource group:
		* az ^group create --name myResourceGroup --location northcentralus

	# Azure Container Instances (ACI)
		Use the following command to check the status of your container:
		* az container ^show --name mycontainer --resource-group myResourceGroup --out table
		
	# The "Always" restart-policy for Azure containers 
		* The Always restart-policy ensures that containers are always restarted, regardless of the ^exit status. 
		* This policy is the default setting for container groups in Azure Container Instances, and makes sense for long-running tasks such as a web server.

	# Fill in the yaml configuration for a container instance:
		* name: securetest
			properties:
				containers:
				- name: mycontainer
					properties:
						environmentVariables:
							- name: 'NOTSECRET'
								^value: 'my-exposed-value'
							- name: 'SECRET'
								^secureValue: 'my-secret-value'
								
	# Azure Container Instances (ACI)
		* By default, Azure Container Instances are ^stateless. If the container crashes or stops, all of its ^state is lost.
			- Tip: To persist ^state beyond the lifetime of the container, you must mount a volume from an external store.
			
	# Which tool or service is this?
		* Azure ^Container ^Apps can help you deploy and manage microservices and containerized apps on a serverless platform that runs on top of Azure Kubernetes Service
		
	# Which tool or service is this?
		* Azure ^Container ^Apps provides the flexibility you need with a serverless container service built for microservice applications and robust autoscaling capabilities without the overhead of managing complex infrastructure
		
	# Common uses of Azure Container Apps include:
		* Deploying API endpoints
		* Hosting background processing applications
		* Handling event-driven processing
		* Running ^microservices
		
	# Fill in the following:
		* Applications built on Azure Container Apps can ^dynamically scale based on: HTTP traffic, event-driven processing, CPU or memory load, and any KEDA-supported scaler
		
	# With Azure Container Apps, you can:
		* Run multiple container revisions and manage the container app's application ^lifecycle.
		
		* ^Autoscale your apps based on any KEDA-supported scale trigger. Most applications can scale to zero. (Applications that scale on CPU or memory load can't scale to zero.)

	# With Azure Container Apps, you can:		
		* Enable HTTPS ^ingress without having to manage other Azure infrastructure.

		* ^Split traffic across multiple versions of an application for Blue/Green deployments and A/B testing scenarios.
		
		* Use internal ingress and service discovery for secure internal-only endpoints with built-in DNS-based service discovery.

	# With Azure Container Apps, you can:				
		* Build ^microservices with Dapr and access its rich set of APIs.

		* Run containers from any registry, public or private, including Docker Hub and Azure Container Registry (ACR).
		
		* Use the Azure CLI extension, Azure portal or ^ARM templates to manage your applications.
		
	# With Azure Container Apps, you can:					
		
		* Provide an existing ^virtual ^network when creating an environment for your container apps.
		
		* Securely manage secrets directly in your application.
		
		* Monitor logs using Azure Log Analytics.
		

	# Fill in the following question about Azure Container Apps
		* Individual container apps are deployed to a single Container Apps ^environment, which acts as a secure boundary around groups of container apps

	# Fill in the following question about Azure Container Apps
		* Container Apps in the same ^environment are deployed in the same virtual network and write logs to the same Log Analytics workspace

	# Command to install the Azure Container Apps Extension for the CLI
		* az extension add --name ^containerapp --upgrade

	# Command to create an Azure Container Apps "Environment"
		* az ^containerapp env create --name myContEnv --resource-group myGroup --location northcentralus
		
	# Creating an Azure Container App
		* By setting --ingress to ^external, you make the container app available to public requests. The command returns a link to access your app
		
	# Which tool or service is this?
		* Azure ^Container ^Apps manages the details of Kubernetes and container orchestration for you. It's containers can use any runtime, programming language, or development stack of your choice

	# Azure Container Apps
		* You can define multiple containers in a single container app to implement the ^sidecar pattern. 
			- The containers in a container app share hard disk and network resources and experience the same application lifecycle.

	# Azure Container Apps
		* You can deploy images hosted on ^private registries by providing credentials in the Container Apps configuration
		{
			...
			"registries": [{
				"server": "docker.io",
				"username": "my-registry-user-name",
				"passwordSecretRef": "my-password-secret-name"
			}]
		}

	# Limitations of Azure Container Apps
		* Azure Container Apps can't run ^privileged containers. If your program attempts to run a process that requires ^root access, the application inside the container experiences a runtime error
		
	# Limitations of Azure Container Apps
		* ^Linux-based (^linux/amd64) container images are required when using Azure Container Apps



~ Topic 2: Develop for Azure storage (15% to 20%)

	# You should be able to...DEVELOP SOLUTIONS THAT USE AZURE COSMOS DB
		* Perform operations on containers and items by using the ^SDK
		* Set the appropriate ^consistency level for operations
		* Implement ^change ^feed notifications

	# You should be able to...DEVELOP SOLUTIONS THAT USE AZURE BLOB STORAGE
		* Set and retrieve ^properties and metadata
		* Perform operations on data by using the appropriate SDK
		* Implement storage ^policies and data ^lifecycle management
		* Implement ^static website hosting


	# BLOB stands for:
		* ^Binary
		* ^Large
		* ^OBject

	# Azure Blob storage is Microsoft's object storage solution for the cloud. 
		* Blob storage is optimized for storing massive amounts of ^unstructured data. 
		* ^Unstructured data is data that doesn't adhere to a particular data model or definition, such as text or binary data

	# Blob storage is designed for:
		* Serving images or documents directly to a browser
		* Storing files for ^distributed access
		* ^Streaming video and audio
		* Writing to log files
		* Storing data for ^backup and restore, disaster recovery, and archiving
		* Storing data for ^analysis by an on-premises or Azure-hosted service

	# Users or client applications can access objects in Blob storage via HTTP/HTTPS, from anywhere in the world. 
		* Objects in Blob storage are accessible via: 
			- the Azure Storage ^REST API
			- Azure ^PowerShell
			- Azure CLI
			- an Azure Storage client library

	# Blob Storage Accounts: Performance Tiers
		* ^Standard: This is the general-purpose v2 account and is recommended for most scenarios using Azure Storage

		* ^Premium: offer higher performance by using solid-state drives. 
			Additionally, you can choose between three account types: 
				- block blobs
				- page blobs 
				- file shares

	# Access Tiers for Blob Storage:
		* The ^Hot access tier
			- optimized for FREQUENT access of objects in the storage account
			- Highest storage costs, but the lowest access costs
			- New storage accounts are created in this tier by default

		* The ^Cool access tier
			- optimized for storing large amounts of data that is infrequently accessed and stored for at least 30 days
			- Lower storage costs and higher access costs

		* The ^Cold access tier
			- optimized for storing data that is INFREQUENTLY accessed and stored for a minimum of 90 days. 
			- has lower storage costs and higher access costs compared to the cool tier.

		* The ^Archive tier
			- optimized for data that can tolerate several hours of retrieval latency and remains in the tier for at least 180 days
			- the most cost-effective option for storing data
			- however, ACCESSING that data is more expensive

	





~ Topic 3: Implement Azure security (20% to 25%)

	# You should be able to...IMPLEMENT USER AUTHENTICATION AND AUTHORIZATION
		* Authenticate and authorize users by using the Microsoft ^Identity platform
		* Authenticate and authorize users and apps by using Microsoft ^Entra ^ID
		* Create and implement ^shared ^access signatures
		* Implement solutions that interact with Microsoft ^Graph

	# You should be able to...IMPLEMENT SECURE AZURE SOLUTIONS
		* Secure app configuration data by using App ^Configuration or Azure ^Key ^Vault
		* Develop code that uses keys, secrets, and ^certificates stored in Azure Key Vault
		* Implement ^Managed ^Identities for Azure resources

	# Authorization vs Authentication
		* ^Authentication - confirm that users are who they say they are.

	# Authorization vs Authentication
		* ^Authorization - gives those users permission to access a resource.
		
	# When you register your application with Microsoft Entra ID, you're creating an identity configuration for your application that allows it to integrate with Microsoft Entra ID. 
	
		When you register an app in the Azure portal, you choose whether it is:
		* ^Single-^tenant: only accessible in your tenant
		* ^Multi-^tenant: accessible in other tenants
		
	# If you register an application in the portal...
		* ...an ^application object (the globally unique instance of the app) and a ^service ^principal object are automatically created in your home tenant
		
		* You also have a globally unique ID for your app (the app or ^client ID)
		
		* In the portal, you can then add secrets or certificates and scopes to make your app work, customize the branding of your app in the sign-in dialog, and more.
		
	# You can also create service principal objects in a tenant using 
		* Azure ^PowerShell, 
		* Azure ^CLI, 
		* Microsoft Graph
		* ...and other tools
		
	# A Microsoft Entra application is defined by its one and only application object. 
		* The application object resides in the Microsoft Entra ^tenant where the application was registered (known as the application's "home" ^tenant)
		
		* An application object is used as a template or blueprint to create one or more ^service ^principal objects
		
		* A service principal is created in every ^tenant where the application is used
		
		* Similar to a class in object-oriented programming, the application object has some ^static properties that are applied to all the created service principals (or application instances).
		
	# The "application object" describes three aspects of an application:
		* How the service can issue ^tokens in order to access the application
		* ^Resources that the application might need to access
		* The ^actions that the application can take

	# To access resources secured by a Microsoft Entra tenant, the entity that requires access must be represented by a security principal. 
		* This is true for both users (^user principal) and applications (^service principal).

	# The security principal defines the...
		* ... ^access policy and permissions for the user/application in the Microsoft Entra tenant.
		* This enables core features such as authentication of the user/application during sign-in, and authorization during resource access.

	# There are three types of SERVICE PRINCIPLES
		* Application Service Principle: this type of service principal is the local representation, or ^application ^instance of a global application object in a single ^tenant or directory
		
	# There are three types of SERVICE PRINCIPLES
		* ^Managed Identity: ^Managed identities provide an identity for applications to use when connecting to resources that support Microsoft Entra authentication
		
	# There are three types of SERVICE PRINCIPLES
		* ^Legacy: this type of service principal represents a ^legacy app
		* ^legacy apps are apps created before app registrations were introduced
		
	# Relationship between application objects and service principals
		* The application object is the ^global representation of your application for use across all tenants, and the service principal is the ^local representation for use in a specific tenant.
		
		* The application object serves as the ^template from which common and default properties are derived for use in creating corresponding service principal objects.
		
	# An application object has:
		* A one to ^one_ relationship with the software application
		* A one to ^many relationships with its corresponding service principal object(s).
		
	# The Microsoft identity platform implements the ... 
		* ^OAuth 2.0 authorization protocol
		* ^OAuth 2.0 is a method through which a third-party app can access web-hosted resources on behalf of a user. 
		* Any web-hosted resource that integrates with the Microsoft identity platform has a resource identifier, or *application ID URI. I.e. "https://graph.microsoft.com", "https://outlook.office.com", etc...
		
	# When a resource's functionality is chunked into small permission sets, third-party apps can be built to request only the permissions that they need to perform their function. Users and administrators can know what data the app can access.
		* In OAuth 2.0, these types of permission sets are called ^scopes. They're also often referred to as permissions. 
		* In the Microsoft identity platform, a permission is represented as a string value.
		
	# Authentication and Authorization: PERMISSION TYPES
		* ^delegated: used by apps that have a signed-in user present. For these apps, either the user or an administrator consents to the permissions that the app requests
		
		* ^app-^only access: used to run apps without a signed in user (i.e. background services or daemons). Only an administrator can consent to ^app-^only access permissions.
		
	# Authentication and Authorization: CONSENT TYPES
		* ^static user consent
		* ^incremental and dynamic user consent
		* ^admin consent
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Static ^user consent: You must specify all the permissions it would ever need up front (Difficult and often overwhelming to user)
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Incremental and Dynamic: Ability to requent permissions ^incrementally instead of all up front. You can ask for a minimum set of permissions upfront and request more over time as the customer uses more app features
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Admin: ^Admin consent ensures that administrators have some other controls before authorizing apps or users to access highly privileged data from the organization.

	# Fill in the following AUTHENTICATION question:
		* The ^Conditional ^Access feature in Microsoft Entra ID offers one of several ways that you can use to secure your app and protect a service:
			- Multifactor authentication
			- Allowing only Intune (cloud-based service for managing mobile devices and computers) to access specific services
			- Restricting user locations and IP ranges

	# Components that make up the Microsoft identity platform:
		* ^OAuth 2.0 and ^OpenID Connect standard-compliant authentication service enabling developers to authenticate several identity types, including:
			- Work or school accounts, provisioned through Microsoft Entra ID
			- Personal Microsoft account, like Skype, Xbox, and Outlook.com
			- Social or local accounts, by using Azure Active Directory B2C
			- Social or local customer accounts, by using Microsoft Entra External ID

	# Components that make up the Microsoft identity platform:
		* ^Open-^source libraries: Microsoft Authentication Libraries (MSAL) and support for other standards-compliant libraries
		
		* Microsoft identity platform ^endpoint: works with a variety of standards-compliant libraries. It implements human readable scopes, in accordance with industry standards.
	
	# Components that make up the Microsoft identity platform:
		* Application ^management portal: A registration and configuration experience in the Azure portal, along with the other Azure management capabilities.
		
		* Application ^configuration API and PowerShell: Programmatic configuration of your applications through the Microsoft Graph API and PowerShell so you can automate your DevOps tasks.

	# Fill in the following AUTHENTICATION question:
		* A ^shared ^access ^signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. 
		* You can provide a ^shared ^access ^signature to clients that you want to grant delegate access to certain storage account resources.

	# Types of Shared Access Signatures:
		Tip: A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources
		
		* ^User ^delegation SAS: secured with Microsoft Entra credentials and also by the permissions specified for the SAS. 
			- Applies to Blob storage only
			
		* ^Service SAS: 
			- secured with the storage account key. 
			- delegates access to a resource in the following Azure Storage services: Blob storage, Queue storage, Table storage, or Azure Files.
			
		* ^Account SAS: 
			- Secured with the storage account key. 
			- Delegates access to resources in one or more of the storage services. 
			- All of the operations available via the other SAS types are also available

	# When to use a Shared Access Signature (SAS)
		* When you want to provide secure access to resources in your ^storage account to any client who doesn't otherwise have permissions to those resources

	# Which tool or service is this?
		* Microsoft ^Graph is the gateway to data and intelligence in Microsoft 365. It provides a unified programmability model that you can use to access the tremendous amount of data in Microsoft 365, Windows 10, and Enterprise Mobility and includes  security features






~ Topic 4: Monitor, troubleshoot, and optimize Azure solutions (15% to 20%)

	# You should be able to...IMPLEMENT CACHING FOR SOLUTIONS
		* Configure cache and ^expiration policies for Azure Cache for Redis
		* Implement secure and optimized application cache ^patterns including data sizing, connections, encryption, and expiration
		* Implement Azure ^Content ^Delivery ^Network endpoints and profiles

	# You should be able to...TROUBLESHOOT SOLUTIONS BY USING APPLICATION INSIGHTS
		* Configure an app or service to use Application Insights
		* Monitor and analyze metrics, logs, and ^traces
		* Implement Application Insights ^web ^tests and ^alerts


	# You can utilize Redis on your own machine as a service or on the cloud. 
		* The default port used for redis is port ^6379

	# Redis is not used for long term storage...
		* All data in Redis exists in ^memory

	# Redis has a very simple structure
		* ^json strings
		* "Key": "Value"
		
	# Which tool can you use to interact with a Redis Cache instance manually?
		* The ^redis-cli allows you to enter commands and interact with a Redis Cache instance manually

	# Which Redis command sets a key called "points" to the value "12"?
		* ^SET points 12
		
	# What does the following Redis command do? 
		"lrange MyList 0 -1"
		* This command returns ALL of values of the ^list called MyList
	
	# Explain the following Redis command:
		"setex MyPassword 2400 dwarfFortress12$"
		* This command sets the ^key called MyPassword and it's ^value to dwarfFortress12$. 
		* Then, that keyvalue pair will ^expire after 2400 ^seconds
	
	# Which command in Redis is responsible for checking to see if a keyvalue pair exists?
		* "^EXISTS myKey"
		
	# Microsoft recommends using the following pattern when working with caches like Redis Cache
		* The ^Cache-^Aside pattern
		
	#  Storing too much in a cookie can have a negative effect on performance as the cookie size grows and is passed and validated with every request.
		* A typical solution uses the ^cookie as a KEY to query the data in a database
		* Using an ^in-^memory cache, like Azure Cache for Redis, to associate information with a user is faster than interacting with a full relational database.
		* This is often called the ^Session ^Store pattern

	# Applications sometimes require a series of commands against a backend data-store to execute as a single atomic operation
		* Single atomic operation means that all commands MUST succeed, or all must be rolled back to the initial state
		* Azure Cache for Redis supports executing a ^batch of commands as a single transaction
		
	# Basic tier for Redis cache runs on a single VM. 
		* This tier has no ^service-^level ^agreement and is ideal for ^development/^test and noncritical workloads
		
	# In general, when choosing Redis Cache tiers, The higher up the tiers you go you get access to higher ^throughput, lower ^latency, better ^availability and more ^features
		
	# Fill in the following:
		* A ^content ^delivery ^network is a distributed network of servers that can efficiently deliver web content to users
		* They store cached content on edge servers in ^point-of-^presence (POP) locations that are close to end users, to minimize latency.
		
	# Features of Azure CDN (Content Delivery Networks):
		* Large scaling, less traffic to origin servers
		* CDN ^Caching rules
		* ^HTTPS support: Azure CDN can host a TLS/SSL certification or you can use your own. 
			Note: Using ^HTTPS does not increase the cost of Azure CDN.
		* Azure diagnostics logs
		* File compression / object ^chunking
		
	# Features of Azure CDN (Content Delivery Networks):
		* Geo-^filtering enables you to allow or block content in specific countries/regions.
		* Azure CDN can also accelerate dynamic content, which can't be cached, by using various network optimizations using CDN POPs.
		* Pre-populate caching in CDNs by using “ az cdn endpoint ^load ”
		* Purge content from your CDNs by using “” or using the PurgeContent method in the Microsoft.Azure.Management.Cdn library in an app implementation.

	# How Azure CDN Functions
		* 1. User requests endpoint, DNS routes request to closest ^POP location
		* 2. If no edge servers have the requested content in their cache, ^POP requests the file from the ^origin server.
				 Note: “^origin server” here can mean an Azure Web App, or any publicly accessible web server.
		* 3. Origin server returns file to edge server in ^POP location
		* 4. Edge server in ^POP location caches file and returns it to user. ^Time-to-^live (TTL) is specified by the origin server in the HTTP header (Cache-Control), or default to 7 days.

	# When setting Caching Rules, Azure CDN's support two kinds of match conditions:
		* Path^ match condition: This condition matches the path of the URL, excluding domain name, and supports the wildcard symbol
			For example, /myfile.html, /my/folder/*, and /my/images/*.jpg
		
		* Extension^ match condition: Provide a list of comma delimited file extensions to match.
			For example, .jpg, .mp3, .png

	# Azure CDN Caching Rules Priority:
		* If no rules are defined, the ^default caching behavior is used (HTTP cache-directive header)
		* If ^global caching rules exist, they overwrite any default caching behavior
		* If ^custom caching rules exist, they overwrite any other behavior

	# "Fresh" content (Azure CDN concepts)
		*  A cached resource is considered to be fresh when its ^age is less than the that defined by a cache setting
		* Therefore if your content is time-sensitive and you need to ensure accurate updates to the content, then make sure to set your ^time-to-^live to a short duration, or consider including a version string in the asset URL.

	# Azure CDNs (Content Delivery Networks) Use Object Chunking
		* When a ^large file is requested, the CDN prefetches smaller 8MB chunks of the content in parallel, serving the user the chunks as they are recieved and caching those chunks for repeated requests.
		* This prefetch process ensures that the content stays one chunk ahead of the user, which reduces latency. 

	# Collections of Azure CDN (Content Delivery Network) endpoints is called:
		* A CDN ^profile
		* A ^profile defines the pricing tier for that collection of endpoints
		* You can only have so many ^profiles in one azure subscription









~ Topic 5: Connect to and consume Azure services and third-party services (15% to 20%)

	# You should be able to...IMPLEMENT API MANAGEMENT
		* Create an Azure API Management instance
		* Create and ^document APIs
		* Configure access to APIs
		* Implement ^policies for APIs

	# You should be able to...DEVELOP EVENT-BASED SOLUTIONS
		* Implement solutions that use Azure Event ^Grid
		* Implement solutions that use Azure Event ^Hub

	# You should be able to...DEVELOP MESSAGE-BASED SOLUTIONS
		* Implement solutions that use Azure ^Service ^Bus
		* Implement solutions that use Azure ^Queue ^Storage queues