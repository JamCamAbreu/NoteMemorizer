~ Topic 1: Develop Azure compute solutions (25% to 30%)

	# You should be able to...IMPLEMENT CONTAINERIZED SOLUTIONS:
		* Create and manage container ^images for solutions
		* Publish an image to Azure Container ^Registry
		* Run containers by using Azure Container ^Instance
		* Create solutions by using Azure Container ^Apps

	# You should be able to...IMPLEMENT AZURE APP SERVICE WEB APPS:
		* Create an Azure App Service Web App
		* Enable ^diagnostics logging
		* ^Deploy code to a web app
		* Configure web app settings including Transport Layer Security (TLS), API settings, and connection strings
		* Implement ^autoscaling

	# You should be able to...Implement Azure Functions
		* Create and configure an Azure ^Functions app
		* Implement input and output ^bindings
		* Implement function ^triggers by using data operations, timers, and webhooks












~ Topic 2: Develop for Azure storage (15% to 20%)

	# You should be able to...DEVELOP SOLUTIONS THAT USE AZURE COSMOS DB
		* Perform operations on containers and items by using the ^SDK
		* Set the appropriate ^consistency level for operations
		* Implement ^change ^feed notifications

	# You should be able to...DEVELOP SOLUTIONS THAT USE AZURE BLOB STORAGE
		* Set and retrieve ^properties and metadata
		* Perform operations on data by using the appropriate SDK
		* Implement storage ^policies and data ^lifecycle management
		* Implement ^static website hosting








~ Topic 3: Implement Azure security (20% to 25%)

	# You should be able to...IMPLEMENT USER AUTHENTICATION AND AUTHORIZATION
		* Authenticate and authorize users by using the Microsoft ^Identity platform
		* Authenticate and authorize users and apps by using Microsoft ^Entra ^ID
		* Create and implement ^shared ^access signatures
		* Implement solutions that interact with Microsoft ^Graph

	# You should be able to...IMPLEMENT SECURE AZURE SOLUTIONS
		* Secure app configuration data by using App ^Configuration or Azure ^Key ^Vault
		* Develop code that uses keys, secrets, and ^certificates stored in Azure Key Vault
		* Implement ^Managed ^Identities for Azure resources

	# Authorization vs Authentication
		* ^Authentication - confirm that users are who they say they are.

	# Authorization vs Authentication
		* ^Authorization - gives those users permission to access a resource.
		
	# When you register your application with Microsoft Entra ID, you're creating an identity configuration for your application that allows it to integrate with Microsoft Entra ID. 
	
		When you register an app in the Azure portal, you choose whether it is:
		* ^Single-^tenant: only accessible in your tenant
		* ^Multi-^tenant: accessible in other tenants
		
	# If you register an application in the portal...
		* ...an ^application object (the globally unique instance of the app) and a ^service ^principal object are automatically created in your home tenant
		
		* You also have a globally unique ID for your app (the app or ^client ID)
		
		* In the portal, you can then add secrets or certificates and scopes to make your app work, customize the branding of your app in the sign-in dialog, and more.
		
	# You can also create service principal objects in a tenant using 
		* Azure ^PowerShell, 
		* Azure ^CLI, 
		* Microsoft Graph
		* ...and other tools
		
	# A Microsoft Entra application is defined by its one and only application object. 
		* The application object resides in the Microsoft Entra ^tenant where the application was registered (known as the application's "home" ^tenant)
		
		* An application object is used as a template or blueprint to create one or more ^service ^principal objects
		
		* A service principal is created in every ^tenant where the application is used
		
		* Similar to a class in object-oriented programming, the application object has some ^static properties that are applied to all the created service principals (or application instances).
		
	# The "application object" describes three aspects of an application:
		* How the service can issue ^tokens in order to access the application
		* ^Resources that the application might need to access
		* The ^actions that the application can take

	# To access resources secured by a Microsoft Entra tenant, the entity that requires access must be represented by a security principal. 
		* This is true for both users (^user principal) and applications (^service principal).

	# The security principal defines the...
		* ... ^access policy and permissions for the user/application in the Microsoft Entra tenant.
		* This enables core features such as authentication of the user/application during sign-in, and authorization during resource access.

	# There are three types of SERVICE PRINCIPLES
		* Application Service Principle: this type of service principal is the local representation, or ^application ^instance of a global application object in a single ^tenant or directory
		
	# There are three types of SERVICE PRINCIPLES
		* ^Managed Identity: ^Managed identities provide an identity for applications to use when connecting to resources that support Microsoft Entra authentication
		
	# There are three types of SERVICE PRINCIPLES
		* ^Legacy: this type of service principal represents a ^legacy app
		* ^legacy apps are apps created before app registrations were introduced
		
	# Relationship between application objects and service principals
		* The application object is the ^global representation of your application for use across all tenants, and the service principal is the ^local representation for use in a specific tenant.
		
		* The application object serves as the ^template from which common and default properties are derived for use in creating corresponding service principal objects.
		
	# An application object has:
		* A one to ^one_ relationship with the software application
		* A one to ^many relationships with its corresponding service principal object(s).
		
	# The Microsoft identity platform implements the ... 
		* ^OAuth 2.0 authorization protocol
		* ^OAuth 2.0 is a method through which a third-party app can access web-hosted resources on behalf of a user. 
		* Any web-hosted resource that integrates with the Microsoft identity platform has a resource identifier, or *application ID URI. I.e. "https://graph.microsoft.com", "https://outlook.office.com", etc...
		
	# When a resource's functionality is chunked into small permission sets, third-party apps can be built to request only the permissions that they need to perform their function. Users and administrators can know what data the app can access.
		* In OAuth 2.0, these types of permission sets are called ^scopes. They're also often referred to as permissions. 
		* In the Microsoft identity platform, a permission is represented as a string value.
		
	# Authentication and Authorization: PERMISSION TYPES
		* ^delegated: used by apps that have a signed-in user present. For these apps, either the user or an administrator consents to the permissions that the app requests
		
		* ^app-^only access: used to run apps without a signed in user (i.e. background services or daemons). Only an administrator can consent to ^app-^only access permissions.
		
	# Authentication and Authorization: CONSENT TYPES
		* ^static user consent
		* ^incremental and dynamic user consent
		* ^admin consent
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Static ^user consent: You must specify all the permissions it would ever need up front (Difficult and often overwhelming to user)
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Incremental and Dynamic: Ability to requent permissions ^incrementally instead of all up front. You can ask for a minimum set of permissions upfront and request more over time as the customer uses more app features
		
	# Authentication and Authorization: CONSENT TYPES
		* ^Admin: ^Admin consent ensures that administrators have some other controls before authorizing apps or users to access highly privileged data from the organization.

	# Fill in the following AUTHENTICATION question:
		* The ^Conditional ^Access feature in Microsoft Entra ID offers one of several ways that you can use to secure your app and protect a service:
			- Multifactor authentication
			- Allowing only Intune (cloud-based service for managing mobile devices and computers) to access specific services
			- Restricting user locations and IP ranges

	# Components that make up the Microsoft identity platform:
		* ^OAuth 2.0 and ^OpenID Connect standard-compliant authentication service enabling developers to authenticate several identity types, including:
			- Work or school accounts, provisioned through Microsoft Entra ID
			- Personal Microsoft account, like Skype, Xbox, and Outlook.com
			- Social or local accounts, by using Azure Active Directory B2C
			- Social or local customer accounts, by using Microsoft Entra External ID

	# Components that make up the Microsoft identity platform:
		* ^Open-^source libraries: Microsoft Authentication Libraries (MSAL) and support for other standards-compliant libraries
		
		* Microsoft identity platform ^endpoint: works with a variety of standards-compliant libraries. It implements human readable scopes, in accordance with industry standards.
	
	# Components that make up the Microsoft identity platform:
		* Application ^management portal: A registration and configuration experience in the Azure portal, along with the other Azure management capabilities.
		
		* Application ^configuration API and PowerShell: Programmatic configuration of your applications through the Microsoft Graph API and PowerShell so you can automate your DevOps tasks.

	# Fill in the following AUTHENTICATION question:
		* A ^shared ^access ^signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. 
		* You can provide a ^shared ^access ^signature to clients that you want to grant delegate access to certain storage account resources.

	# Types of Shared Access Signatures:
		Tip: A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources
		
		* ^User ^delegation SAS: secured with Microsoft Entra credentials and also by the permissions specified for the SAS. 
			- Applies to Blob storage only
			
		* ^Service SAS: 
			- secured with the storage account key. 
			- delegates access to a resource in the following Azure Storage services: Blob storage, Queue storage, Table storage, or Azure Files.
			
		* ^Account SAS: 
			- Secured with the storage account key. 
			- Delegates access to resources in one or more of the storage services. 
			- All of the operations available via the other SAS types are also available

	# When to use a Shared Access Signature (SAS)
		* When you want to provide secure access to resources in your ^storage account to any client who doesn't otherwise have permissions to those resources

	# Which tool or service is this?
		* Microsoft ^Graph is the gateway to data and intelligence in Microsoft 365. It provides a unified programmability model that you can use to access the tremendous amount of data in Microsoft 365, Windows 10, and Enterprise Mobility and includes  security features






~ Topic 4: Monitor, troubleshoot, and optimize Azure solutions (15% to 20%)

	# You should be able to...IMPLEMENT CACHING FOR SOLUTIONS
		* Configure cache and ^expiration policies for Azure Cache for Redis
		* Implement secure and optimized application cache ^patterns including data sizing, connections, encryption, and expiration
		* Implement Azure ^Content ^Delivery ^Network endpoints and profiles

	# You should be able to...TROUBLESHOOT SOLUTIONS BY USING APPLICATION INSIGHTS
		* Configure an app or service to use Application Insights
		* Monitor and analyze metrics, logs, and ^traces
		* Implement Application Insights ^web ^tests and ^alerts


	# You can utilize Redis on your own machine as a service or on the cloud. 
		* The default port used for redis is port ^6379

	# Redis is not used for long term storage...
		* All data in Redis exists in ^memory

	# Redis has a very simple structure
		* ^json strings
		* "Key": "Value"
		
	# Which tool can you use to interact with a Redis Cache instance manually?
		* The ^redis-cli allows you to enter commands and interact with a Redis Cache instance manually

	# Which Redis command sets a key called "points" to the value "12"?
		* ^SET points 12
		
	# What does the following Redis command do? 
		"lrange MyList 0 -1"
		* This command returns ALL of values of the ^list called MyList
	
	# Explain the following Redis command:
		"setex MyPassword 2400 dwarfFortress12$"
		* This command sets the ^key called MyPassword and it's ^value to dwarfFortress12$. 
		* Then, that keyvalue pair will ^expire after 2400 ^seconds
	
	# Which command in Redis is responsible for checking to see if a keyvalue pair exists?
		* "^EXISTS myKey"
		
	# Microsoft recommends using the following pattern when working with caches like Redis Cache
		* The ^Cache-^Aside pattern
		
	#  Storing too much in a cookie can have a negative effect on performance as the cookie size grows and is passed and validated with every request.
		* A typical solution uses the ^cookie as a KEY to query the data in a database
		* Using an ^in-^memory cache, like Azure Cache for Redis, to associate information with a user is faster than interacting with a full relational database.
		* This is often called the ^Session ^Store pattern

	# Applications sometimes require a series of commands against a backend data-store to execute as a single atomic operation
		* Single atomic operation means that all commands MUST succeed, or all must be rolled back to the initial state
		* Azure Cache for Redis supports executing a ^batch of commands as a single transaction
		
	# Basic tier for Redis cache runs on a single VM. 
		* This tier has no ^service-^level ^agreement and is ideal for ^development/^test and noncritical workloads
		
	# In general, when choosing Redis Cache tiers, The higher up the tiers you go you get access to higher ^throughput, lower ^latency, better ^availability and more ^features
		
	# Fill in the following:
		* A ^content ^delivery ^network is a distributed network of servers that can efficiently deliver web content to users
		* They store cached content on edge servers in ^point-of-^presence (POP) locations that are close to end users, to minimize latency.
		
	# Features of Azure CDN (Content Delivery Networks):
		* Large scaling, less traffic to origin servers
		* CDN ^Caching rules
		* ^HTTPS support: Azure CDN can host a TLS/SSL certification or you can use your own. 
			Note: Using ^HTTPS does not increase the cost of Azure CDN.
		* Azure diagnostics logs
		* File compression / object ^chunking
		
	# Features of Azure CDN (Content Delivery Networks):
		* Geo-^filtering enables you to allow or block content in specific countries/regions.
		* Azure CDN can also accelerate dynamic content, which can't be cached, by using various network optimizations using CDN POPs.
		* Pre-populate caching in CDNs by using “az cdn endpoint ^load”
		* Purge content from your CDNs by using “” or using the PurgeContent method in the Microsoft.Azure.Management.Cdn library in an app implementation.

	# How Azure CDN Functions
		* 1. User requests endpoint, DNS routes request to closest ^POP location
		* 2. If no edge servers have the requested content in their cache, ^POP requests the file from the ^origin server.
				 Note: “^origin server” here can mean an Azure Web App, or any publicly accessible web server.
		* 3. Origin server returns file to edge server in ^POP location
		* 4. Edge server in ^POP location caches file and returns it to user. ^Time-to-^live (TTL) is specified by the origin server in the HTTP header (Cache-Control), or default to 7 days.

	# When setting Caching Rules, Azure CDN's support two kinds of match conditions:
		* Path^ match condition: This condition matches the path of the URL, excluding domain name, and supports the wildcard symbol
			For example, /myfile.html, /my/folder/*, and /my/images/*.jpg
		
		* Extension^ match condition: Provide a list of comma delimited file extensions to match.
			For example, .jpg, .mp3, .png

	# Azure CDN Caching Rules Priority:
		* If no rules are defined, the ^default caching behavior is used (HTTP cache-directive header)
		* If ^global caching rules exist, they overwrite any default caching behavior
		* If ^custom caching rules exist, they overwrite any other behavior

	# "Fresh" content (Azure CDN concepts)
		*  A cached resource is considered to be fresh when its ^age is less than the that defined by a cache setting
		* Therefore if your content is time-sensitive and you need to ensure accurate updates to the content, then make sure to set your ^time-to-^live to a short duration, or consider including a version string in the asset URL.

	# Azure CDNs (Content Delivery Networks) Use Object Chunking
		* When a ^large file is requested, the CDN prefetches smaller 8MB chunks of the content in parallel, serving the user the chunks as they are recieved and caching those chunks for repeated requests.
		* This prefetch process ensures that the content stays one chunk ahead of the user, which reduces latency. 

	# Collections of Azure CDN (Content Delivery Network) endpoints is called:
		* A CDN ^profile
		* A ^profile defines the pricing tier for that collection of endpoints
		* You can only have so many ^profiles in one azure subscription









~ Topic 5: Connect to and consume Azure services and third-party services (15% to 20%)

	# You should be able to...IMPLEMENT API MANAGEMENT
		* Create an Azure API Management instance
		* Create and ^document APIs
		* Configure access to APIs
		* Implement ^policies for APIs

	# You should be able to...DEVELOP EVENT-BASED SOLUTIONS
		* Implement solutions that use Azure Event ^Grid
		* Implement solutions that use Azure Event ^Hub

	# You should be able to...DEVELOP MESSAGE-BASED SOLUTIONS
		* Implement solutions that use Azure ^Service ^Bus
		* Implement solutions that use Azure ^Queue ^Storage queues